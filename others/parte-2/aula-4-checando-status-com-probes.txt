Checando status com Probes

Apesar do Pod estar saudável, nossa aplicação dentro do container não responde como esperado!
Como o Kubernetes pode saber que o container dentro do Pod deve ser reiniciado?

Liveness, Readiness and Startup Probes

Liveness - prova de vida que a aplicação dentro de um container de um pod está funcionando.

Principal utilização de probes:
Tornar visível ao Kubernetes que uma aplicação não está se comportando da maneira esperada.

-------------------------------------------

portal-noticias-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal-noticias-deployment
spec:
  template:
    metadata:
      name: portal-noticias
      labels:
        app: portal-noticias
    spec:
      containers:
        - name: portal-noticias-container
          image: aluracursos/portal-noticias:1
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: portal-configmap
          livenessProbe:
            httpGet:
              path: /
              port: 80
            periodSeconds: 10
            failureThreshold: 3
            initialDelaySeconds: 20
  replicas: 3
  selector:
    matchLabels:
      app: portal-noticias

--------------------------------------------

sistema-noticias-statefulset.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal-noticias-deployment
spec:
  template:
    metadata:
      name: portal-noticias
      labels:
        app: portal-noticias
    spec:
      containers:
        - name: portal-noticias-container
          image: aluracursos/portal-noticias:1
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: portal-configmap
          livenessProbe:
            httpGet:
              path: /
              port: 80
            periodSeconds: 10
            failureThreshold: 3
            initialDelaySeconds: 20
  replicas: 3
  selector:
    matchLabels:
      app: portal-noticias
      
----------------------------------------------------

Utilizando o HTTP, como um Liveness Probe entende que a aplicação não está respondendo de maneira saudável?
Ele indicará falha caso o código de retorno seja menor que 200 ou maior/igual a 400.

----------------------------------------------------------------------------------------

Utilizando Readiness Probes

O container dentro do Pod pode ainda não estar 100% para receber requisições!

portal-noticias-deployment.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sistema-noticias-statefulset
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sistema-noticias
      name: sistema-noticias
    spec:
      containers:
        - name: sistema-noticias-container
          image: aluracursos/sistema-noticias:1
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: sistema-configmap
          volumeMounts:
            - name: imagens
              mountPath: /var/www/html/uploads
            - name: sessao
              mountPath: /tmp
          livenessProbe:
            httpGet:
              path: /
              port: 80
            periodSeconds: 10
            failureThreshold: 3
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /inserir_noticias.php
              port: 80
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 3
      volumes:
        - name: imagens
          persistentVolumeClaim:
            claimName: imagens-pvc
        - name: sessao
          persistentVolumeClaim:
            claimName: sessao-pvc
  selector:
    matchLabels:
      app: sistema-noticias
  serviceName: svc-sistema-noticias
  
-------------------------------------------------

sistema-noticias-statefulset.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sistema-noticias-statefulset
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sistema-noticias
      name: sistema-noticias
    spec:
      containers:
        - name: sistema-noticias-container
          image: aluracursos/sistema-noticias:1
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: sistema-configmap
          volumeMounts:
            - name: imagens
              mountPath: /var/www/html/uploads
            - name: sessao
              mountPath: /tmp
          livenessProbe:
            httpGet:
              path: /
              port: 80
            periodSeconds: 10
            failureThreshold: 3
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /inserir_noticias.php
              port: 80
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 3
      volumes:
        - name: imagens
          persistentVolumeClaim:
            claimName: imagens-pvc
        - name: sessao
          persistentVolumeClaim:
            claimName: sessao-pvc
  selector:
    matchLabels:
      app: sistema-noticias
  serviceName: svc-sistema-noticias
  
--------------------------------------------------

O Kubernetes nem sempre tem como saber se a aplicação está saudável.

Podemos criar critérios para definir se a aplicação está saudável através de probes.

Como criar LivenessProbes com o campo livenessProbe.

LivenessProbes podem fazer a verificação em diferentes intervalos de tempo via HTTP.

Como criar ReadinessProbes com o campo readinessProbe.

ReadinessProbes podem fazer a verificação em diferentes intervalos de tempo via HTTP.

LivenessProbes são para saber se a aplicação está saudável e/ou se deve ser reiniciada, 
enquanto ReadinessProbes são para saber se a aplicação já está pronta para receber requisições depois de iniciar.

Além do HTTP, também podemos fazer verificações via TCP.

----------------------------------------------------